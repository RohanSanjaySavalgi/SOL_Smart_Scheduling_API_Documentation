// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/event": {
            "get": {
                "description": "This function retrieves event details based on providerId and eventId from the request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search Provider without Events"
                ],
                "summary": "Fetch event details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "eventId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Provider ID",
                        "name": "providerId",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/api/event/book": {
            "post": {
                "description": "BookingEvent handles the HTTP request for booking an event for a healthcare provider based on the provided event details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Book Event"
                ],
                "summary": "Book an Event",
                "parameters": [
                    {
                        "description": "Event booking request details",
                        "name": "bookEventBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.EventRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/event/list": {
            "post": {
                "description": "EventSearch handles the HTTP request for searching available time slots of healthcare providers based on specified filters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Search Available Time Slots",
                "parameters": [
                    {
                        "description": "Search filters for available time slots",
                        "name": "searchFilters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.SearchEventRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/healthCheck": {
            "get": {
                "description": "HealthCheckHandler checks the health of the service and returns the status in JSON format.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health Check"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "Health check successful",
                        "schema": {
                            "$ref": "#/definitions/healthCheck.HealthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/healthCheck.HealthResponse"
                        }
                    }
                }
            }
        },
        "/api/incupdate": {
            "post": {
                "description": "Handles the incremental update of calendar events based on booking status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Calendar"
                ],
                "summary": "Incremental Update of Calendar Events",
                "responses": {}
            }
        },
        "/api/load": {
            "post": {
                "description": "This function initiates the loading of calendars and events for providers asynchronously.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Calendar"
                ],
                "summary": "Load calendars and events",
                "responses": {}
            }
        },
        "/api/provider": {
            "post": {
                "description": "ProviderSearch handles the HTTP request for searching healthcare providers based on various filters and returns the results.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "providers"
                ],
                "summary": "Search for Healthcare Providers",
                "parameters": [
                    {
                        "description": "Search filters for healthcare providers",
                        "name": "f",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ProviderRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v2/provider": {
            "post": {
                "description": "Retrieves a list of healthcare providers based on the provided search filters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search Providers with Events"
                ],
                "summary": "Fetch healthcare providers",
                "parameters": [
                    {
                        "description": "Search filters for providers",
                        "name": "filters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ProviderRequest"
                        }
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "dtos.EventRequest": {
            "type": "object",
            "properties": {
                "eventId": {
                    "description": "ID of the event to be booked",
                    "type": "string"
                },
                "locationType": {
                    "description": "The location information as to will the event will be in-person or virtual",
                    "type": "string"
                },
                "providerId": {
                    "description": "ID of the provider for the event",
                    "type": "string"
                },
                "userInfo": {
                    "description": "Information about the user making the booking",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dtos.UserInfo"
                        }
                    ]
                }
            }
        },
        "dtos.Location": {
            "type": "object",
            "properties": {
                "facility": {
                    "description": "Name of the facility",
                    "type": "string"
                },
                "state": {
                    "description": "State where the provider is located",
                    "type": "string"
                }
            }
        },
        "dtos.ProviderRequest": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "Age input for filtering providers",
                    "type": "string"
                },
                "clinicalFocus": {
                    "description": "List of clinical focus areas",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deliveryMethod": {
                    "description": "Preferred delivery method",
                    "type": "string"
                },
                "ethnicity": {
                    "description": "Ethnicity preference for filtering",
                    "type": "string"
                },
                "gender": {
                    "description": "Gender preference for filtering",
                    "type": "string"
                },
                "language": {
                    "description": "Language preference for filtering",
                    "type": "string"
                },
                "location": {
                    "description": "Location details for filtering",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dtos.Location"
                        }
                    ]
                },
                "therapeuticModality": {
                    "description": "Preferred therapeutic modality",
                    "type": "string"
                }
            }
        },
        "dtos.SearchEventRequest": {
            "type": "object",
            "properties": {
                "providerId": {
                    "description": "List of provider IDs to search for available slots",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dtos.UserInfo": {
            "type": "object",
            "properties": {
                "userName": {
                    "description": "User's name",
                    "type": "string"
                }
            }
        },
        "healthCheck.HealthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "runtime": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "localhost:7071",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
